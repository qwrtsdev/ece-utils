const { 
    Events, 
    MessageFlags,
    ChannelType, 
    PermissionsBitField,
    TextDisplayBuilder, 
    SeparatorBuilder, 
    SeparatorSpacingSize, 
    ButtonBuilder, 
    ButtonStyle, 
    ActionRowBuilder, 
    ContainerBuilder, 
    EmbedBuilder
} = require('discord.js');
const { channels } = require('../utils/config.json')

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        const channel = interaction.channel;
        const user = interaction.user;
        const unixTime = Math.floor(Date.now() / 1000);

        switch (interaction.customId) {
            // handle support ticket
            case 'create_support_ticket': {
                const thread = await channel.threads.create({
                    name: `${interaction.user.username}'s Chat`,
                    type: ChannelType.PrivateThread,
                    reason: interaction.user.id,
                });

                await interaction.reply({
                    content: `‚úÖ <@${interaction.user.id}> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà ${thread.url}`,
                    flags: MessageFlags.Ephemeral
                });

                await thread.members.add(interaction.user.id);
                await thread.setInvitable(false);

                const ticketComponents = [
                    new ContainerBuilder()
                        .addTextDisplayComponents(
                            new TextDisplayBuilder().setContent("- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ!\n- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n- ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô Google ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤\n- ‡∏´‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° \"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß\""),
                        )
                        .addSeparatorComponents(
                            new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Large).setDivider(true),
                        )
                        .addActionRowComponents(
                            new ActionRowBuilder()
                                .addComponents(
                                    new ButtonBuilder()
                                        .setStyle(ButtonStyle.Primary)
                                        .setLabel("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
                                        .setCustomId("close_support_ticket"),
                                ),
                        ),
                ];

                await thread.send({
                    components: ticketComponents,
                    flags: MessageFlags.IsComponentsV2,
                });

                const ticketNotiChannel = interaction.client.channels.cache.get(channels.modlogs);
                const ticketNotiEmbed = new EmbedBuilder()
                    .setDescription(`### üì´ **‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢ <@${interaction.user.id}>**\nüïë ‡πÄ‡∏ß‡∏•‡∏≤  : <t:${unixTime}:f>\nüìé ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : ${thread.url}`)
                    .setColor("#00f556");

                await ticketNotiChannel.send({
                    content: '@everyone',
                    embeds: [ticketNotiEmbed],
                });

                break;
            }
            case 'close_support_ticket': {
                await interaction.reply({
                    content: `üóëÔ∏è <@${user.id}> ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`,
                });

                setTimeout(async () => {
                    try {
                        await channel.delete();

                        const ticketNotiChannel = interaction.client.channels.cache.get(channels.modlogs);
                        const ticketNotiEmbed = new EmbedBuilder()
                            .setDescription(`### üîí **‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏Ç‡∏≠‡∏á <@${interaction.user.id}> ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß**\nüïë ‡πÄ‡∏ß‡∏•‡∏≤  : <t:${unixTime}:f>\nüë§ ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ : <@${interaction.user.id}>`)
                            .setColor("#f50031");

                        await ticketNotiChannel.send({
                            embeds: [ticketNotiEmbed],
                        });
                    } catch (err) {
                        console.error('Error deleting channel:', err);
                    }
                }, 3000);

                break;
            }

            // handle threads
            case 'thread_problem_solved': {
                const tagID = "1385693579845832824"

                if (!(user.id === interaction.channel.ownerId || interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels))) {
                    await interaction.reply({
                        content: `‚ùå <@${user.id}> ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå`, 
                        flags: MessageFlags.Ephemeral 
                    });
                    return;
                }

                if (channel.type === ChannelType.PublicThread || channel.type === ChannelType.PrivateThread) {
                    await interaction.reply({ 
                        content: `‚úÖ <@${user.id}> ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `, 
                        flags: MessageFlags.Ephemeral 
                    });

                    const existedTags = channel.appliedTags;
                    const updatedTags = [...new Set([...existedTags, tagID])];
                    await channel.setAppliedTags(updatedTags);
                    await channel.setLocked(true);
                }

                break;
            }
            default: {
                return;
            }
        }
    },
};