const {
    Events,
    EmbedBuilder,
    MessageFlags,
    ButtonBuilder,
    ButtonStyle,
    ActionRowBuilder,
    ContainerBuilder,
    TextDisplayBuilder,
    SectionBuilder,
    ThumbnailBuilder,
    SeparatorBuilder,
    SeparatorSpacingSize,
    ModalSubmitInteraction,
} = require('discord.js')
const { channels } = require('../utils/config.json');
const eceMembers = require('../models/user.js');

module.exports = {
    name: Events.InteractionCreate,
    once: false,

    async execute(interaction) {  
        const unixTime = Math.floor(Date.now() / 1000);

        if (!interaction.isModalSubmit()) return;

        switch (interaction.customId) {
            case 'verification_modal': {
                try {
                    const requestChannel = interaction.client.channels.cache.get(channels.request);
                    const userNickName = interaction.fields.getTextInputValue('userNickName');
                    const studentIdNumber = interaction.fields.getTextInputValue('studentIdNumber');
                    const departmentName = interaction.fields.getTextInputValue('departmentName');
                    const instagramUsername = interaction.fields.getTextInputValue('instagramUsername');

                    const requestComponents = [
                        new ContainerBuilder()
                            .addSectionComponents(
                                new SectionBuilder()
                                    .setThumbnailAccessory(
                                        new ThumbnailBuilder()
                                            .setURL(interaction.user.displayAvatarURL({ extension: 'png' }))
                                    )
                                    .addTextDisplayComponents(
                                        new TextDisplayBuilder().setContent(`-# üìÑ **‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏´‡∏°‡πà**\n# **<@${interaction.user.id}>**\n<t:${unixTime}:f>\n\n1Ô∏è‚É£ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\`\`\`${userNickName}\`\`\`\n2Ô∏è‚É£ ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\`\`\`${studentIdNumber}\`\`\`\n3Ô∏è‚É£ ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\`\`\`${departmentName}\`\`\`\n4Ô∏è‚É£ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Instagram ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\`\`\`${instagramUsername}\`\`\``),
                                    ),
                            )
                            .addSeparatorComponents(
                                new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Large).setDivider(true),
                            )
                            .addActionRowComponents(
                                new ActionRowBuilder()
                                    .addComponents(
                                        new ButtonBuilder()
                                            .setStyle(ButtonStyle.Success)
                                            .setLabel("‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å")
                                            .setCustomId(`VERIFY_USER-${interaction.user.id}`),
                                        new ButtonBuilder()
                                            .setStyle(ButtonStyle.Danger)
                                            .setLabel("‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°")
                                            .setCustomId(`DENY_USER-${interaction.user.id}`),
                                    ),
                            ),
                    ];

                    const replyEmbed = new EmbedBuilder()
                        .setDescription(`‚úÖ <@${interaction.user.id}> ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`)
                        .setColor("#33ff70");

                    const response = await interaction.reply({
                        embeds: [replyEmbed],
                    });

                    await eceMembers.create({
                        userID: interaction.user.id,
                        nickname: userNickName,
                        department: departmentName,
                        instagram: instagramUsername,
                    })

                    await requestChannel.send({
                        components: requestComponents,
                        flags: MessageFlags.IsComponentsV2,
                    });

                    const dmComponents = [
                        new ContainerBuilder()
                            .addTextDisplayComponents(
                                new TextDisplayBuilder().setContent(`-# <t:${unixTime}:f>\n# üïë **‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß !**\n‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏Å‡∏û‡∏±‡∏Å...\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`),
                            ),
                    ];

                    await interaction.user.send({
                        components: dmComponents,
                        flags: MessageFlags.IsComponentsV2,
                    });

                    setTimeout(async () => { await response.delete(); }, 3000);
                } catch (error) {
                    console.error('[verification] error :', error);

                    const embed = new EmbedBuilder()
                        .setDescription(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á`)
                        .setColor("#ff0000");
                    
                    if (!interaction.replied) {
                        await interaction.reply({
                            embeds: [embed],
                            flags: MessageFlags.Ephemeral,
                        });
                    }
                }
                break;
            }

            case 'anonymous': {
                const channel = interaction.client.channels.cache.get(channels.anonymous);
                const logChannel = interaction.client.channels.cache.get(channels.modlogs);
                const anonymousMessage = interaction.fields.getTextInputValue('anonymousMessage');

                const replyEmbed = new EmbedBuilder()
                    .setDescription(`‚úÖ <@${interaction.user.id}> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!`)
                    .setColor("#33ff70");

                const response = await interaction.reply({
                    embeds: [replyEmbed],
                });
                setTimeout(async () => { await response.delete(); }, 10);

                const message = await channel.send({
                    content: `\`\`üí¨ ‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô :\`\`\n${anonymousMessage}`
                })

                const logEmbed = new EmbedBuilder()
                    .setDescription(`üí¨ <@${interaction.user.id}> ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö ${message.url}`)
                    .setColor("#fafafa");
                await logChannel.send({
                    embeds: [logEmbed],
                })

                break;
            }

            default: 
                return;
        }
    }
}