const { 
    Events, 
    MessageFlags,
    ChannelType, 
    PermissionsBitField,
    TextDisplayBuilder, 
    SeparatorBuilder, 
    SeparatorSpacingSize, 
    ButtonBuilder, 
    ButtonStyle, 
    ActionRowBuilder, 
    ContainerBuilder, 
    EmbedBuilder,
    ModalBuilder,
    TextInputBuilder,
    TextInputStyle,
} = require('discord.js');
const { roles, channels } = require('../utils/config.json');
const eceMembers = require('../models/user.js');

module.exports = {
    name: Events.InteractionCreate,
    async execute(interaction) {
        const channel = interaction.channel;
        const user = interaction.user;
        const unixTime = Math.floor(Date.now() / 1000);

        if (!interaction.isButton()) return;

        // verification buttons
        if (interaction.customId.startsWith('VERIFY_USER-')) {
            const userId = interaction.customId.split('-')[1];
            const member = await interaction.guild.members.fetch(userId).catch(() => null);

            if (!member) {
                return interaction.reply({
                    content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ <@${userId}> ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`,
                    flags: MessageFlags.Ephemeral,
                });
            }

            const editComponents = [
                new ContainerBuilder()
                    .addTextDisplayComponents(
                        new TextDisplayBuilder().setContent(`‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° <@${userId}> ‡πÅ‡∏•‡πâ‡∏ß`),
                    ),
            ]

            await interaction.update({
                components: editComponents,
                flags: MessageFlags.IsComponentsV2,
            })

            const joinRole = interaction.guild.roles.cache.find(role => role.id === roles.unauthorized);
            const verifyRole = interaction.guild.roles.cache.find(role => role.id === roles.member);
            await member.roles.add(verifyRole)
            await member.roles.remove(joinRole)

            const updateDB = await eceMembers.updateOne({ userID: userId }, { isVerified: true });
            console.log('Updated DB :', updateDB);

            const dmComponents = [
                new ContainerBuilder()
                    .addTextDisplayComponents(
                        new TextDisplayBuilder().setContent(`-# <t:${unixTime}:f>\n# ‚úÖ **‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ !**\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢\n‡∏Ç‡∏≠‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏Ñ‡∏ß‡∏¥‡∏ä‡∏≤ Electrical and Computer Engineering!\n\n‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ / ‡πÅ‡∏ä‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô / ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢\n‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏ô‡∏∏‡∏Å!`),
                    )
                    .addSeparatorComponents(
                        new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Small).setDivider(true),
                    )
                    .addActionRowComponents(
                        new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setStyle(ButtonStyle.Link)
                                    .setLabel("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ó‡∏´‡∏•‡∏±‡∏Å")
                                    .setURL("https://discord.com/channels/1385682544623616211/1385682545210949840"),
                            ),
                    ),
            ]

            return member.send({
                components: dmComponents,
                flags: MessageFlags.IsComponentsV2,
            })
        } else if (interaction.customId.startsWith('DENY_USER-')) {
            const userId = interaction.customId.split('-')[1];
            const member = await interaction.guild.members.fetch(userId).catch(() => null);

            if (!member) {
                return interaction.reply({
                    content: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ <@${userId}> ‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå`,
                    flags: MessageFlags.Ephemeral,
                });
            }

            const editComponents = [
                new ContainerBuilder()
                    .addTextDisplayComponents(
                        new TextDisplayBuilder().setContent(`‚ùå ‡∏õ‡∏é‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° <@${userId}> ‡πÅ‡∏•‡πâ‡∏ß`),
                    ),
            ]

            await interaction.update({
                components: editComponents,
                flags: MessageFlags.IsComponentsV2,
            })

            const dmComponents = [
                new ContainerBuilder()
                    .addTextDisplayComponents(
                        new TextDisplayBuilder().setContent(`-# <t:${unixTime}:f>\n# ‚ö†Ô∏è **‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ !**\n‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏ô‡∏±‡∏Å\n\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡∏ô‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà \n‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`),
                    )
                    .addSeparatorComponents(
                        new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Small).setDivider(true),
                    )
                    .addActionRowComponents(
                        new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setStyle(ButtonStyle.Link)
                                    .setLabel("‡πÑ‡∏õ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà")
                                    .setURL("https://discord.com/channels/1385682544623616211/1385686306033762496"),
                                new ButtonBuilder()
                                    .setStyle(ButtonStyle.Link)
                                    .setLabel("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
                                    .setURL("https://discordapp.com/users/824442267318222879/"),
                            ),
                    ),

            ]

            return member.send({
                components: dmComponents,
                flags: MessageFlags.IsComponentsV2,
            })
        }

        switch (interaction.customId) {
            // handle support ticket
            case 'create_support_ticket': {
                const thread = await channel.threads.create({
                    name: `${interaction.user.username}'s Chat`,
                    type: ChannelType.PrivateThread,
                    reason: interaction.user.id,
                });

                await interaction.reply({
                    content: `‚úÖ <@${interaction.user.id}> ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà ${thread.url}`,
                    flags: MessageFlags.Ephemeral
                });

                await thread.members.add(interaction.user.id);
                await thread.setInvitable(false);

                const ticketComponents = [
                    new ContainerBuilder()
                        .addTextDisplayComponents(
                            new TextDisplayBuilder().setContent(`<t:${unixTime}:f>\n\n- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏¢‡∏¥‡πà‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ!\n- ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô\n- ‡∏ó‡∏î‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô Google ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ã‡πâ‡∏≥‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤\n- ‡∏´‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° \"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß\"`),
                        )
                        .addSeparatorComponents(
                            new SeparatorBuilder().setSpacing(SeparatorSpacingSize.Large).setDivider(true),
                        )
                        .addActionRowComponents(
                            new ActionRowBuilder()
                                .addComponents(
                                    new ButtonBuilder()
                                        .setStyle(ButtonStyle.Primary)
                                        .setLabel("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß")
                                        .setCustomId("close_support_ticket"),
                                ),
                        ),
                ];

                await thread.send({
                    components: ticketComponents,
                    flags: MessageFlags.IsComponentsV2,
                });

                const ticketNotiChannel = interaction.client.channels.cache.get(channels.modlogs);
                const ticketNotiEmbed = new EmbedBuilder()
                    .setDescription(`### üì´ **‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢ <@${interaction.user.id}>**\nüïë ‡πÄ‡∏ß‡∏•‡∏≤  : <t:${unixTime}:f>\nüìé ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° : ${thread.url}`)
                    .setColor("#00f556");

                await ticketNotiChannel.send({
                    content: '@everyone',
                    embeds: [ticketNotiEmbed],
                });

                break;
            }
            case 'close_support_ticket': {
                await interaction.reply({
                    content: `üóëÔ∏è <@${user.id}> ‡∏õ‡∏¥‡∏î‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`,
                });

                setTimeout(async () => {
                    try {
                        await channel.delete();

                        const ticketNotiChannel = interaction.client.channels.cache.get(channels.modlogs);
                        const ticketNotiEmbed = new EmbedBuilder()
                            .setDescription(`### üîí **‡∏ó‡∏¥‡∏Ñ‡πÄ‡∏Å‡πá‡∏ï‡∏Ç‡∏≠‡∏á <@${interaction.user.id}> ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß**\nüïë ‡πÄ‡∏ß‡∏•‡∏≤  : <t:${unixTime}:f>\nüë§ ‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ : <@${interaction.user.id}>`)
                            .setColor("#f50031");

                        await ticketNotiChannel.send({
                            embeds: [ticketNotiEmbed],
                        });
                    } catch (err) {
                        console.error('Error deleting channel:', err);
                    }
                }, 3000);

                break;
            }

            // handle verification
            case 'open_verification': {
                const modal = new ModalBuilder()
                    .setCustomId('verification_modal')
                    .setTitle('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô')
                    .addComponents(
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('userNickName')
                                .setLabel("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                                .setStyle(TextInputStyle.Short)
                                .setPlaceholder('‡πÄ‡∏Å‡∏°')
                                .setRequired(true)
                        ),
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('studentIdNumber')
                                .setLabel("‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ 13 ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                                .setStyle(TextInputStyle.Short)
                                .setPlaceholder('680xxxxxxxxxx')
                                .setMaxLength(13)
                                .setMinLength(13)
                                .setRequired(true)
                        ),
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('departmentName')
                                .setLabel("‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                                .setStyle(TextInputStyle.Short)
                                .setPlaceholder('‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå')
                                .setRequired(true)
                        ),
                        new ActionRowBuilder().addComponents(
                            new TextInputBuilder()
                                .setCustomId('instagramUsername')
                                .setLabel("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Instagram ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
                                .setStyle(TextInputStyle.Short)
                                .setPlaceholder('sillyqwrts')
                        )
                    );

                await interaction.showModal(modal);
                break;
            }

            // handle threads
            case 'thread_problem_solved': {
                const tagID = "1385693579845832824"

                if (!(user.id === interaction.channel.ownerId || interaction.member.permissions.has(PermissionsBitField.Flags.ManageChannels))) {
                    await interaction.reply({
                        content: `‚ùå <@${user.id}> ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå`, 
                        flags: MessageFlags.Ephemeral 
                    });
                    return;
                }

                if (channel.type === ChannelType.PublicThread || channel.type === ChannelType.PrivateThread) {
                    await interaction.reply({ 
                        content: `‚úÖ <@${user.id}> ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à `, 
                        flags: MessageFlags.Ephemeral 
                    });

                    const existedTags = channel.appliedTags;
                    const updatedTags = [...new Set([...existedTags, tagID])];
                    await channel.setAppliedTags(updatedTags);
                    await channel.setLocked(true);
                }

                break;
            }

            // default
            default: return;
        }
    },
};